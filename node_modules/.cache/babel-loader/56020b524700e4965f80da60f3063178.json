{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jacky\\\\Tweetme\\\\Tweetme-2\\\\tweetme2-web\\\\src\\\\tweets\\\\commentfeed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { apiCommentFeed } from './lookup';\nimport { Comment } from './commentdetail';\nexport function CommentFeedList(props) {\n  _s();\n\n  const [commentsInit, setCommentssInit] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [nextUrl, setNextUrl] = useState(null);\n  const [commentsDidSet, setCommentsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newComments].concat(commentsInit);\n\n    if (final.length !== comments.length) {\n      setComments(final);\n    }\n  }, [props.newComments, comments, commentsInit]);\n  useEffect(() => {\n    if (commentsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          setCommentsInit(response.results);\n          setCommentsDidSet(true);\n        }\n      };\n\n      apiCommentFeed(handleTweetListLookup);\n    }\n  }, [commentsInit, commentsDidSet, setCommentsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateCommentsInit = [...commentsInit];\n    updateCommentsInit.unshift(newComment);\n    setCommentsInit(updateCommentsInit);\n    const updateFinalComments = [...comments];\n    updateFinalComments.unshift(comments);\n    setComments(updateFinalComments);\n  };\n\n  const handleLoadNext = event => {\n    event.preventDefault();\n\n    if (nextUrl !== null) {\n      const handleLoadNextResponse = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          const newComments = [...comments].concat(response.results);\n          setCommentsInit(newComments);\n          setComments(newComments);\n        }\n      };\n\n      apiCommentFeed(handleLoadNextResponse, nextUrl);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }\n  }, comments.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Comment, {\n      tweet: item,\n      didRetweet: handleDidRetweet,\n      className: \"my-5 py-5 border bg-white text-dark\",\n      key: `${index}-{item.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }\n    });\n  }), nextUrl !== null && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleLoadNext,\n    className: \"btn btn-outline-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 26\n    }\n  }, \"Load next\"));\n}\n\n_s(CommentFeedList, \"rjOqRlyvzyEg8OaUDCsI3fwowIs=\");\n\n_c = CommentFeedList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentFeedList\");","map":{"version":3,"sources":["C:/Users/Jacky/Tweetme/Tweetme-2/tweetme2-web/src/tweets/commentfeed.js"],"names":["React","useEffect","useState","apiCommentFeed","Comment","CommentFeedList","props","commentsInit","setCommentssInit","comments","setComments","nextUrl","setNextUrl","commentsDidSet","setCommentsDidSet","final","newComments","concat","length","handleTweetListLookup","response","status","next","setCommentsInit","results","username","handleDidRetweet","newTweet","updateCommentsInit","unshift","newComment","updateFinalComments","handleLoadNext","event","preventDefault","handleLoadNextResponse","map","item","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState}  from 'react'\r\n\r\nimport {apiCommentFeed} from './lookup'\r\n\r\nimport {Comment} from './commentdetail'\r\n\r\nexport function CommentFeedList(props) {\r\n    const [commentsInit, setCommentssInit] = useState([])\r\n    const [comments, setComments] = useState([])\r\n    const [nextUrl, setNextUrl] = useState(null)\r\n    const [commentsDidSet, setCommentsDidSet] = useState(false)\r\n    useEffect(()=>{\r\n      const final = [...props.newComments].concat(commentsInit)\r\n      if (final.length !== comments.length) {\r\n        setComments(final)\r\n      }\r\n    }, [props.newComments, comments, commentsInit])\r\n\r\n    useEffect(() => {\r\n      if (commentsDidSet === false){\r\n        const handleTweetListLookup = (response, status) => {\r\n          if (status === 200){\r\n            setNextUrl(response.next)\r\n            setCommentsInit(response.results)\r\n            setCommentsDidSet(true)\r\n          }\r\n        }\r\n        apiCommentFeed(handleTweetListLookup)\r\n      }\r\n    }, [commentsInit, commentsDidSet, setCommentsDidSet, props.username])\r\n\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n      const updateCommentsInit = [...commentsInit]\r\n      updateCommentsInit.unshift(newComment)\r\n      setCommentsInit(updateCommentsInit)\r\n      const updateFinalComments = [...comments]\r\n      updateFinalComments.unshift(comments)\r\n      setComments(updateFinalComments)\r\n    }\r\n    const handleLoadNext = (event) => {\r\n      event.preventDefault()\r\n      if (nextUrl !== null) {\r\n        const handleLoadNextResponse = (response, status) =>{\r\n          if (status === 200){\r\n            setNextUrl(response.next)\r\n            const newComments = [...comments].concat(response.results)\r\n            setCommentsInit(newComments)\r\n            setComments(newComments)\r\n          }\r\n        }\r\n        apiCommentFeed(handleLoadNextResponse, nextUrl)\r\n      }\r\n    }\r\n\r\n    return <React.Fragment>{comments.map((item, index)=>{\r\n      return <Comment  \r\n        tweet={item} \r\n        didRetweet={handleDidRetweet}\r\n        className='my-5 py-5 border bg-white text-dark' \r\n        key={`${index}-{item.id}`} />\r\n    })}\r\n    {nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\r\n    </React.Fragment>\r\n  }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}